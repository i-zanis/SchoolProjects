# assigning colours to variables
class bcolors:
    HEADER    = '\033[95m'
    OKBLUE    = '\033[94m'
    OKWHIT   = '\033[89m'
    WARNING   = '\033[93m'
    FAIL      = '\033[91m'
    ENDC      = '\033[0m'
    BOLD      = '\033[1m'
    UNDERLINE = '\033[4m'

student_db = [] #predefining the dictionary to store student objects
user_input = "" #predefining the user input

#simulating a UWL student account
class Student:
  def __init__(self, name, age, course, ID):
    self.name = name
    self.age = age
    self.course = course
    self.ID = ID

#prints student account details
  def print_details(self):
    print(bcolors.BOLD + bcolors.OKBLUE + "Name:             " + bcolors.ENDC, self.name)
    print(bcolors.BOLD + bcolors.OKBLUE + "Age:              " + bcolors.ENDC, self.age)
    print(bcolors.BOLD + bcolors.OKBLUE + "Course:           " + bcolors.ENDC, self.course)
    print(bcolors.BOLD + bcolors.OKBLUE + "Student ID:       " + bcolors.ENDC, self.ID)

#registers students
def student_reg():
  print("\nType the student details below:")
  name = ask_name()
  age = ask_Age()
  course = ask_Course()
  ID = ask_StudentID()
  student = Student(name, age, course, ID)
  student_db.append(student)

#takes alphabetical input called inside student_reg()
def alphabeticalChar_input():
    user_input = input()
    while not user_input.replace(" ", "").isalpha():
        print(bcolors.BOLD + bcolors.FAIL + "Only alphabetical characters A-Z are accepted." + bcolors.ENDC + "\nPlease try again.")
        user_input = input()
    return user_input.upper()

#takes numerical input called inside student_reg()
def numbers_only_input():
    user_input = input()
    while user_input.replace(" ", "").isalpha():
        print(bcolors.BOLD + bcolors.FAIL + "Only numberical characters 0-9 are accepted." + bcolors.ENDC + "\nPlease try again.")
        user_input = input()
    return user_input.upper()
    
#name input called inside student_reg()
def ask_name():
  print("Student Name: ")
  x = alphabeticalChar_input()
  return x

#age input called inside student_reg()
def ask_Age():
  print("Student Age: ")
  x = numbers_only_input()
  return x

#student course input called inside student_reg()
def ask_Course():
  print("Student Course: ")
  x = alphabeticalChar_input()
  return x

#student ID input called inside student_reg()
def ask_StudentID():
  print("Student ID: ")
  x = numbers_only_input()
  return x



def main():
  while True:#3 command options to proceed
    command = input("Type the corresponding command:\n[Q]Quit.\n[A]Add student.\n[D]View the all student accounts in the database.\n").lower()
    if command == "q": # quit program
        break
    elif command == "a":#register account
      student_reg()
    elif command == "d": #display accounts
        print(bcolors.UNDERLINE + bcolors.BOLD + bcolors.OKWHIT + "[Student Database]" + bcolors.ENDC)
        for i in student_db:
          i.print_details()
          print()#blank line for clarity
    
#calling main    
if __name__ == '__main__':
    main()
